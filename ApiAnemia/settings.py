"""
Django settings for ApiAnemia project.

Generated by 'django-admin startproject' using Django 4.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import dj_database_url
from dotenv import load_dotenv
import os
import sys

load_dotenv()

PRODUCTION = os.getenv("PRODUCTION", "True") == "True"
BUCKET_URL = os.getenv("S3_BUCKET_URL")
BUCKET_URL_3 = os.getenv("S3_BUCKET_URL_3")

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = str(os.getenv("SECRET_KEY"))

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = not PRODUCTION

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "models.apps.ModelsConfig",
    "api.apps.ApiConfig",
    "rest_framework",
    "rest_framework.authtoken",
    "corsheaders",
    "chatbot",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "ApiAnemia.middleware.AuthMiddleware",
]

ROOT_URLCONF = "ApiAnemia.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "ApiAnemia.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {"default": dj_database_url.config(default=os.getenv("DATABASE_URL"))}

# Pagination
REST_FRAMEWORK = {
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 20,
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

if not PRODUCTION:
    CORS_ALLOW_ALL_ORIGINS = True
else:
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:3000",
        "http://localhost",
        "https://localhost",
        "http://127.0.0.1",
        "http://127.0.0.1:3000",
        "https://127.0.0.1",
    ]

# Cargar modelos en primera carga
import skops.io as sio
import os
from io import BytesIO
import requests
from prophet.serialize import model_from_json

MODEL_DIAGNOSTICO = None
MODEL_DIETA = None
MODEL_PRONOSTICO = None

# Evitar la carga del modelo en migraciones
if "migrate" not in sys.argv and "makemigrations" not in sys.argv:
    if PRODUCTION:
        try:
            print("cargando el modelo obj1 en producción desde el bucket ...")
            response = requests.get(BUCKET_URL)
            response.raise_for_status()
            model_data = response.content
            MODEL_DIAGNOSTICO = sio.load(BytesIO(model_data))

            print("cargando el modelo obj2 en producción ...")
            model_obj2_path = os.path.join(BASE_DIR, "models", "static", "obj2.json")
            with open(model_obj2_path, "r") as fin:
                m2 = model_from_json(fin.read())
            MODEL_PRONOSTICO = m2

            print("cargando el modelo obj3 en producción desde el bucket ...")
            response = requests.get(BUCKET_URL_3)
            response.raise_for_status()
            model_data = response.content
            MODEL_DIETA = sio.load(BytesIO(model_data))

        except requests.exceptions.RequestException as e:
            print(f"Error al descargar el modelo obj1: {e}")
    # else:
    # Cargar en local
    # print("cargando el modelo en local ...")
    # model_obj1_path = os.path.join(BASE_DIR, 'models', 'static', 'obj1.skops')
    # MODEL_DIAGNOSTICO = sio.load(file=model_obj1_path)

    # print("cargando el modelo obj2 en local ...")
    # model_obj2_path = os.path.join(BASE_DIR, 'models', 'static', 'obj2.json')
    # with open(model_obj2_path, 'r') as fin:
    #     m2 = model_from_json(fin.read())
    # MODEL_PRONOSTICO = m2

    # print("cargando el modelo obj3 en local ...")
    # model_obj3_path = os.path.join(BASE_DIR, 'models', 'static', 'obj3.skops')
    # MODEL_DIETA = sio.load(file=model_obj3_path)
